{"version":3,"sources":["style/img/freecell_bg.png","component/Card.js","utils/CardConstant.js","component/CardGroup.js","container/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","dragInfo","seqIndex","cardIndex","dragTmpData","cancelDragDefault","e","preventDefault","stopPropagation","Card","_ref3","picId","suits","number","_ref3$isDraggable","isDraggable","seqArr","updateFunc","props","Object","objectWithoutProperties","concat","picPath","window","location","origin","react_default","a","createElement","assign","className","draggable","onDragStart","_ref","slice","length","onDragOver","onDragEnter","onDrop","_ref2","preSeqIndex","preCardIndex","toConsumableArray","splice","data-role","src","style","width","SuitType","SPADE","HEART","DIAMOND","CLUB","CardGroup","groupData","map","data","index","sequneceStyle","position","zIndex","bottom","Fragment","key","component_Card","suit","gameWrapperStyle","backgroundImage","GameBackground","suitArr","numberArr","App","_useState","useState","_useState2","slicedToArray","cardArr","setCardArr","_useState3","_useState4","setSeqArr","useEffect","_i","_suitArr","_i3","_numberArr","push","i","randomIndex","Math","floor","random","tmpCurrentVal","seqMaxSize","tmpSeqArr","CardGroup_CardGroup","Boolean","hostname","match","ReactDOM","render","container_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e746d6cb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/freecell_bg.b8c3e933.png\";","import React,{ useEffect } from 'react';\r\n\r\nlet dragInfo = {\r\n    seqIndex:null,\r\n    cardIndex:null,\r\n};\r\nlet dragTmpData = [];\r\n\r\n\r\nconst onDragStart = (e,{suits,number,cardIndex,seqArr,seqIndex,updateFunc}) => {\r\n    dragTmpData = seqArr[seqIndex].slice(cardIndex,seqArr[seqIndex].length);\r\n    dragInfo.seqIndex = seqIndex;\r\n    dragInfo.cardIndex = cardIndex;\r\n}\r\n\r\nconst onDrop = (e,{suits,number,cardIndex,seqArr,seqIndex,updateFunc}) => {\r\n    let { seqIndex:preSeqIndex,cardIndex:preCardIndex } = dragInfo;\r\n    if (seqIndex === preSeqIndex)\r\n        return false;\r\n    // 移動卡牌至新地點\r\n    seqArr[seqIndex] = [...seqArr[seqIndex],...dragTmpData];\r\n    // 移除拖曳卡牌\r\n    seqArr[preSeqIndex].splice(preCardIndex,seqArr[seqIndex].length);\r\n\r\n    updateFunc([...seqArr]);\r\n    dragTmpData=[];\r\n}\r\n\r\n/**\r\n * 避免onDragOver,onDragEnter預設行為，Ex.禁止符號\r\n */\r\nconst cancelDragDefault = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    return false;\r\n}\r\n\r\nconst Card = ({suits,number,isDraggable=true,seqArr,seqIndex,cardIndex,updateFunc,...props}) => {\r\n    let picId;\r\n    if (suits && number) {\r\n        picId = `card_${suits}_${number}`;\r\n    } else if (suits) {\r\n        picId = `suits_${suits}`;\r\n    } else {\r\n        picId = `card_blank`;\r\n    }\r\n    const picPath = `${window.location.origin}/Images/${picId}.png`;\r\n    return(\r\n        <div \r\n            className=\"card draggable-card\"\r\n            draggable={isDraggable}\r\n            onDragStart={(e) => {onDragStart(e,{suits,number,seqArr,seqIndex,cardIndex,updateFunc})}}\r\n            onDragOver={cancelDragDefault}\r\n            onDragEnter={cancelDragDefault}\r\n            onDrop={(e) => {onDrop(e,{suits,number,seqArr,seqIndex,cardIndex,updateFunc})}}\r\n            data-role=\"drag-drop-container\"\r\n            {...props}\r\n        >\r\n            <img src={picPath} style={{width:'135px'}}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","\r\nexport const ColorType = {\r\n    'BLACK':0,\r\n    'RED':1,\r\n}\r\n\r\nexport const SuitType = {\r\n    'SPADE':'spade',\r\n    'HEART':'heart',\r\n    'DIAMOND':'diamond',\r\n    'CLUB':'club'\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nexport const CardGroup = ({ groupData,seqArr,seqIndex,updateFunc }) => {\r\n    return (\r\n        <div className=\"card-sequnece\">\r\n            {\r\n                groupData.length >  0 ? groupData.map((data, index) => { \r\n                    const cardInterval = index * 135;\r\n                    const sequneceStyle = {\r\n                        position: 'relative',\r\n                        zIndex: index,\r\n                        bottom: `${cardInterval}px`\r\n                    }\r\n                    return (\r\n                        <React.Fragment key={index}>\r\n                            <Card suits={data.suit} number={data.number} cardIndex={index} seqIndex={seqIndex} seqArr={seqArr} style={sequneceStyle} updateFunc={updateFunc}/>\r\n                        </React.Fragment>\r\n                    )\r\n                }) :\r\n                <Card isDraggable={false} cardIndex={0} seqIndex={seqIndex} seqArr={seqArr} updateFunc={updateFunc}/>                \r\n            }\r\n        </div>\r\n    )\r\n\r\n}","import React, { useState, useEffect } from 'react';\r\nimport '../style/css/game.css';\r\nimport GameBackground from '../style/img/freecell_bg.png';\r\nimport Card from '../component/Card';\r\nimport { SuitType } from '../utils/CardConstant'; \r\nimport { CardGroup } from '../component/CardGroup';\r\n\r\nconst gameWrapperStyle = {\r\n  backgroundImage: `url(${GameBackground})`,\r\n  width: '100vw'\r\n}\r\n\r\nconst suitArr = [SuitType.SPADE, SuitType.HEART, SuitType.DIAMOND, SuitType.CLUB];\r\nconst numberArr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];\r\n\r\n/**\r\n * TODO 2019.07.29\r\n * 1. 檢核拖曳規則\r\n * 2. top-card-block 無法存放卡片\r\n * 3. 計時器\r\n * 4. 按鈕列表\r\n * 5. 透過redux或是context控管狀態，state不要傳遞那麼多層\r\n */\r\nfunction App() {\r\n  const [cardArr, setCardArr] = useState([]);\r\n  const [seqArr, setSeqArr] = useState([]);\r\n  // componentDidMount\r\n  useEffect(() => {\r\n    // 初始卡牌資訊\r\n    if ( cardArr.length == 0) {\r\n      for (const suit of suitArr) {\r\n        for (const number of numberArr) {\r\n          cardArr.push({suit,number});\r\n        }\r\n      }\r\n\r\n      // 隨機排序\r\n      for (let i = 0 ; i < cardArr.length; i++) {\r\n        const randomIndex = Math.floor(Math.random()*cardArr.length);\r\n        const tmpCurrentVal = cardArr[i];\r\n        cardArr[i] = cardArr[randomIndex];\r\n        cardArr[randomIndex] = tmpCurrentVal;\r\n      }\r\n\r\n      let seqMaxSize = 7;\r\n      let tmpSeqArr = [];\r\n      // 發牌 7777 | 6666\r\n      for (let i= 0; i<cardArr.length; i++) {\r\n        tmpSeqArr.push(cardArr[i]);\r\n        if (tmpSeqArr.length == seqMaxSize) {\r\n          seqArr.push(tmpSeqArr);\r\n          tmpSeqArr = [];\r\n          if (i == 27) {\r\n            seqMaxSize = 6;\r\n          }\r\n        }\r\n      }\r\n      setCardArr([...cardArr]);\r\n      setSeqArr([...seqArr]);\r\n    }\r\n  });\r\n  return (\r\n    <div className=\"gameWrapper\" style={gameWrapperStyle}>\r\n      {/* 暫放區及完成區 */}\r\n      <div className=\"top-card-block\">\r\n        <Card />\r\n        <Card />\r\n        <Card />\r\n        <Card />\r\n        <div className=\"timer\">\r\n          <h2>TIME</h2>\r\n          <h2>00:00</h2>\r\n        </div>\r\n        <Card suits={SuitType.SPADE} />\r\n        <Card suits={SuitType.HEART} />\r\n        <Card suits={SuitType.DIAMOND} />\r\n        <Card suits={SuitType.CLUB} />\r\n      </div>\r\n      {/* 卡片區 */}\r\n      <div className=\"game-block\">\r\n        {\r\n          seqArr.map((data,index) => {\r\n            return(<CardGroup key={index} groupData={data} seqArr={seqArr} seqIndex={index} updateFunc={setSeqArr}/>)\r\n          })\r\n        }      \r\n      </div>\r\n      {/* 功能列表 */}\r\n      <div className=\"icon-bar\"></div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './container/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}